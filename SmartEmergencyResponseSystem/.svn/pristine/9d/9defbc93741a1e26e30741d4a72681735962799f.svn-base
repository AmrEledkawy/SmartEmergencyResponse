classdef DSim < handle
    %DSIM Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
         GroundVehicles
         Quadcopters
         %FixedWings
                  
         GVslrUDP;
         QCslrUDP;
         
         GVgeUDP;
         QCgeUDP;
         FWgeUDP;
         
         stepTimer;
    end
    
    methods
        
        function obj = DSim(groundVehicleManager,quadCopterManager)
            
            obj.GroundVehicles = groundVehicleManager;
            obj.Quadcopters = quadCopterManager;
            
            obj.startUDP();
            assignin('base','nGV',numel(obj.GroundVehicles));
            assignin('base','nRC',numel(obj.Quadcopters));
            assignin('base','nFW',0);                        
            
            evalin('base','setupSimulator()');            
            setWaypoints(obj.GroundVehicles, obj.Quadcopters);
            obj.stepTimer = timer('ExecutionMode','fixedRate','Period',0.3);            
        end
        
        
        function start(obj)            
            set(obj.stepTimer,'TimerFcn',@(~,~)obj.simCallback());
            start(obj.stepTimer);
        end
        
        function stop(obj)
            stop(obj.stepTimer)
        end    
        function startUDP(obj)
            SimuLinkIP = '127.0.01';            

            GVFleetSLPR = 9050;
            %FWFleetSLPR = 9090;
            RCFleetSLPR = 9030;

            obj.GVslrUDP= udp(SimuLinkIP,GVFleetSLPR+1,'LocalPort',GVFleetSLPR);
            %obj.FWslrUDP= udp(SimuLinkIP,FWFleetSLPR+1,'LocalPort',FWFleetSLPR);
            obj.QCslrUDP= udp(SimuLinkIP,RCFleetSLPR+1,'LocalPort',RCFleetSLPR); 
            
            GVport = 4012;
            QCport = 4013;                        
            
            GeIP = '127.0.0.1';
            
            obj.GVgeUDP = udp(GeIP,GVport+30,'LocalPort',GVport);
            obj.QCgeUDP = udp(GeIP,QCport+30,'LocalPort',QCport); 
            
            fopen(obj.GVgeUDP);
            fopen(obj.QCgeUDP);
        end
        
        function setWaypoints(obj)
            
            SimuLinkIP = '127.0.01';            
            
            GVFleetSLP = 9040;
            %FWFleetSLP = 9080;
            RCFleetSLP = 9020;
            
            groundvehicles = obj.GroundVehicles.getVehicles();            
            idx = 0;
            % Loop over all ground Vehicles and simulate
            for groundVehicle = groundvehicles
                idx = idx + 1;
                
                plan = groundVehicle.getRoute();
                nWP = size(plan,1);
                
                dataGV=[groundVehicle.location(1), plan(:,1)', plan(end,1)*ones(1,100-nWP); groundVehicle.location(2), plan(:,2)', plan(end,2)*ones(1,100-nWP); zeros(1,nWP),-1,zeros(1,99-nWP)];
                sendWaypointsUDP(dataGV,idx,SimuLinkIP,GVFleetSLP);
            end
            
            quads = obj.Quadcopters.getVehicles();            
            idx = 0;
            
            % Loop over all Quadcopters
            for quadcopter = quads
                idx = idx + 1;
                
                plan = quadcopter.getRoute();
                nWP = size(plan,1);
                
                dataQC=[quadcopter.location(1), plan(:,1)', plan(end,1)*ones(1,100-nWP); quadcopter.location(2), plan(:,2)', plan(end,2)*ones(1,100-nWP); 50*ones(1,100);zeros(1,100);5*ones(1,100)];
                sendWaypointsUDP(dataQC,idx,SimuLinkIP,RCFleetSLP);
            end
        end
        
        function simCallback(obj)
            rawDataQC=[];
            rawDataGV=[];
            %rawDataFW=[];
            
            if ~isempty(obj.Quadcopters)
                
                     fopen(obj.QCslrUDP);               
                     rawDataQC=fread(obj.QCslrUDP,numel(obj.Quadcopters.getVehicles())*48);
                     fclose(obj.QCslrUDP);                                     
            end            
            
            if ~isempty(obj.GroundVehicles)
                
                    fopen(obj.GVslrUDP);               
                    rawDataGV=fread(obj.GVslrUDP,numel(obj.GroundVehicles.getVehicles())*48);
                    fclose(obj.GVslrUDP);                                                                
            end                        
            
            fwrite(obj.QCgeUDP,rawDataQC);
            fwrite(obj.GVgeUDP,rawDataGV);
            %fwrite(obj.FWgeUDP,rawDataFW);            
                  
        end                                   
    end    
end

