classdef GeManager < handle
    %GEMANAGER This class recieves positional data from the GeCommunicator
    %and updates the Google earth interface accordingly    
    properties
       LAIdx;
       Cr;
       Views;
    end
    
    properties (Access = protected)   
        
        Vaddudp;
        GVudp;      %UDP connections for the vehicles
        QCudp;
        FWudp;
        ATudp;
        BBudp;
        KKudp;
        
        GVdata;     %Data of vehicles locations
        QCdata;
        FWdata; 
        ATdata;
        BBdata;
        KKdata;
        
        IEwindow;        
        GeTimer;               
    end
    
    methods 
        function obj = GeManager()            
            
            % Open ActiveX-Control from Microsoft-Internet-Explorer
            GeInterface(obj);
            explorer = actxcontrol('Shell.Explorer.2',[0 0 805 645]);                                   
            webpage = [pwd '/web/ge_interface.html'];
            Navigate(explorer, webpage); 
            obj.IEwindow = explorer.Document.parentWindow;            
            
            obj.GeTimer = timer('ExecutionMode','fixedRate','Period',0.5,'TimerFcn',@obj.updateGe);            
            obj.startUDP();
            obj.initData();                        
            obj.startTimer();
            
            obj.Cr = 0;
            obj.Views = 0;
            %obj.addCameraViews();
        end              
        
        function startTimer(obj)
            start(obj.GeTimer);
        end
        
        function stopTimer(obj)
            stop(obj.GeTimer);
        end
        
        function updateGe(obj,~,~)
            
            cm_head = -60;
            cm_tilt = 20;
            cm_roll = 0;
            
            GV = reshape(obj.GVdata,numel(obj.GVdata)/6,6);
            QC = reshape(obj.QCdata,numel(obj.QCdata)/6,6);
            FW = reshape(obj.FWdata,numel(obj.FWdata)/6,6);
            AT = reshape(obj.ATdata,numel(obj.ATdata)/6,6);
            KK = reshape(obj.KKdata,numel(obj.KKdata)/6,6);
            BB = reshape(obj.BBdata,numel(obj.BBdata)/6,6);
              
            alt = [ones(1,numel(GV))*10 ones(1,numel(QC))*100 ones(1,numel(FW))*50 ones(1,numel(BB)) ones(1,numel(KK)) ones(1,numel(AT))*40];
            VC = [GV; QC; FW; BB; KK; AT];
            if isempty(VC)
                return
            end
            if ~obj.Cr
                LA = repmat([VC(obj.LAIdx,1),VC(obj.LAIdx,2),alt(obj.LAIdx)+20,1,90,5,30],size(VC,1),1);            
            else
                LA = repmat([VC(obj.LAIdx,1),VC(obj.LAIdx,2),alt(obj.LAIdx)+20,1,cm_head,cm_tilt,cm_roll],size(VC,1),1);            
            end
              
            GV = obj.parseUDP(GV);
            QC = obj.parseUDP(QC);
            %FW = obj.parseUDP(FW);
            LA = obj.parseUDP(LA);
              
            if ~isempty(GV)
                obj.IEwindow.execScript(['move6GV(' GV{1} ',' GV{2} ',' GV{3} ',' GV{4} ',' GV{5} ',' GV{6} ')'], 'Jscript');
            end
            if ~isempty(QC)
                obj.IEwindow.execScript(['move6AR(' QC{1} ',' QC{2} ',' QC{3} ',' QC{4} ',' QC{5} ',' QC{6} ')'], 'Jscript');
            end
            %obj.IEwindow.execScript(['move6FW(' FW{1} ',' FW{2} ',' FW{3} ',' FW{4} ',' FW{5} ',' FW{6} ')'], 'Jscript');
              
            if ~(obj.Cr)
                obj.IEwindow.execScript(['moveFullLaView(' num2str(obj.LAIdx-1) ',' LA{1} ',' LA{2} ',' LA{3} ',' LA{4} ',' LA{5} ',' LA{6} ',' LA{7} ')'], 'Jscript');
                pause(0.5);
            else
                obj.IEwindow.execScript(['moveFullCmView(' num2str(obj.LAIdx-1) ',' LA{1} ',' LA{2} ',' LA{3} ',' LA{5} ',' LA{6} ',' LA{7} ')'], 'Jscript');
            end
              
            % Set LAIdx to -1 to not update
            obj.IEwindow.execScript(['synchronousUpdate(' num2str(obj.LAIdx-1) ', 0, 0, 0, 0, 0, 0, 0, 0)'], 'Jscript');
             
        end
        
        function delete(obj)
            
            stop(obj.GeTimer);
            delete(obj.GeTimer);
            fclose(obj.GVudp);
            fclose(obj.QCudp);
            fclose(obj.FWudp); 
            fclose(obj.Vaddudp);
            
        end        
        
    end
    
    methods (Access = protected)
        function initData(obj)
            obj.GVdata = [];     %Data of vehicles locations
            obj.QCdata = [];
            obj.FWdata = []; 
            obj.ATdata = [];
            obj.BBdata = [];
            obj.KKdata = [];
        end
        
        function startUDP(obj)
                         
            Vaddport = 4012;
            GVport = 4013;
            QCport = 4014;            
            FWport = 4015;
            ATport = 4016;
            BBport = 4017;
            KKport = 4018;
            
            GeIP = '127.0.0.1';
            
            obj.Vaddudp = udp(GeIP,'LocalPort',Vaddport+30);
            obj.GVudp = udp(GeIP,'LocalPort',GVport+30);
            obj.QCudp = udp(GeIP,'LocalPort',QCport+30);
            obj.FWudp = udp(GeIP,'LocalPort',FWport+30);
            obj.ATudp = udp(GeIP,'LocalPort',ATport+30);
            obj.BBudp = udp(GeIP,'LocalPort',BBport+30);
            obj.KKudp = udp(GeIP,'LocalPort',KKport+30);
            
            obj.Vaddudp.DatagramReceivedFcn = @(~,~)obj.VehCount();
            obj.GVudp.DatagramReceivedFcn = @(~,~)obj.updateGV();
            obj.QCudp.DatagramReceivedFcn = @(~,~)obj.updateQC();
            %obj.FWudp.DatagramReceivedFcn = @(~,~)obj.updateFW();
            
            fopen(obj.GVudp);
            fopen(obj.QCudp);
            %fopen(obj.FWudp);
            fopen(obj.Vaddudp);
                        
        end                
        
        % Read UDP data from the other computer
        function updateGV(obj)
            obj.GVdata = fread(obj.GVudp);            
            
        end
        
        function updateQC(obj)
            obj.QCdata = fread(obj.QCudp);
            
        end
        
        function updateFW(obj)
            obj.FWdata = fread(obj.FWudp);
            
        end   
        
%         function addCameraViews(obj)
%             pause(5);
%             cm_lat = [37.798889;37.801250];
%             cm_lon = [-122.443889;-122.455211];
%             cm_alt = [0;120];
%             cm_head = [0;-60];
%             cm_tilt = [70;20];
%             cm_roll = [0;0];
%             
            %for i = 1:obj.cmNr
            %    obj.IEwindow.execScript(['addCmView(' num2str(cm_lat(i))  ',' num2str(cm_lon(i))   ','  num2str(cm_alt(i))  ',' num2str(cm_head(i)) ',' num2str(cm_tilt(i)) ',' num2str(cm_roll(i)) ')'], 'Jscript');
            %    pause(0.5)
            %end
            
           %obj.Views = obj.Views + 2;
       % end
            
        function VehCount(obj)
            
            data = fread(obj.Vaddudp, 100, 'single');
            obj.Views = obj.Views + data(2);
            locations = data(3:end);
            locations = reshape(locations,2,numel(locations)/2);
            lat = locations(1,:);
            lon = locations(2,:);
            head = 0;
            cm_head = -60;
            cm_tilt = 20;
            cm_roll = 0;
            
            switch(data(1))
                case 1     % GV               
                    for i = 1:data(2)
                        obj.IEwindow.execScript('addGroundVehicle()', 'Jscript');
                        pause(0.5)
                        obj.IEwindow.execScript( ...
                        ['addGVModel(' num2str(lat(i)) ',' num2str(lon(i)) ',' num2str(head) ')'], 'Jscript');
                        obj.GVdata(end+1,:) = [lat(i) lon(i) 0 0 0 0];
                        pause(0.5)                       
                    end
                     alt = 10;
                case 2      %QC
                    for i = 1:data(2)
                        obj.IEwindow.execScript('addArDroneVehicle()', 'Jscript');
                        pause(0.5)
                        obj.IEwindow.execScript( ...
                        ['addARModel(' num2str(lat(i)) ',' num2str(lon(i)) ',' num2str(head) ')'], 'Jscript');
                        pause(0.5)
                        obj.QCdata(end+1,:) = [lat(i) lon(i) 100 0 0 0];                        
                    end
                    alt = 120;
                case 3      %FW
                    for i = 1:data(2)
                        obj.IEwindow.execScript('addFixedWingVehicle()', 'Jscript');
                        pause(0.5)
                        obj.IEwindow.execScript( ...
                        ['addFWModel(' num2str(lat(i)) ',' num2str(lon(i)) ',' num2str(head) ')'], 'Jscript');
                        pause(0.5)
                        obj.FWdata(end+1,:) = [lat(i) lon(i) 100 0 0 0];                        
                    end
                    alt = 100;
                case 4      %BB
                    for i = 1:data(2)
                        obj.IEwindow.execScript('addBiobot()', 'Jscript');
                        pause(0.5)
                        obj.IEwindow.execScript( ...
                        ['addBBModel(' num2str(lat(i)) ',' num2str(lon(i)) ',' num2str(head) ')'], 'Jscript');
                        pause(0.5)
                        obj.BBdata(end+1,:) = [lat(i) lon(i) 0 0 0 0];                        
                    end
                    alt = 10;
                case 5      %KK
                    for i = 1:data(2)
                        obj.IEwindow.execScript('addKuka()', 'Jscript');
                        pause(0.5)
                        obj.IEwindow.execScript( ...
                        ['addKKModel(' num2str(lat(i)) ',' num2str(lon(i)) ',' num2str(head) ')'], 'Jscript');
                        pause(0.5)
                        obj.KKdata(end+1,:) = [lat(i) lon(i) 0 0 0 0];                        
                    end
                     alt = 10;
                case 6      %AT
                    for i = 1:data(2)
                        obj.IEwindow.execScript('addAtlas()', 'Jscript');
                        pause(0.5)
                        obj.IEwindow.execScript( ...
                        ['addATModel(' num2str(lat(i)) ',' num2str(lon(i)) ',' num2str(head) ')'], 'Jscript');
                        pause(0.5)
                        obj.ATdata(end+1,:) = [lat(i) lon(i) 0 0 0 0];
                    end
                    alt = 60;                    
                otherwise
                    %do nothing
                    disp('Incomprehensible data')
                    
            end                        
            
            
            la_head = 0;
            la_tilt = 70;
            la_range = 5;
            
            for i = 1:data(2)
                obj.IEwindow.execScript(['addLaView(' num2str(la_range) ',' num2str(la_tilt) ',' num2str(alt) ')'], 'Jscript');
                pause(0.5);
                obj.IEwindow.execScript(['teleportTo(' num2str(lat(i)) ',' num2str(lon(i)) ',' num2str(la_head) ')'], 'Jscript');
                pause(0.5);
                obj.IEwindow.execScript(['addCmView(' num2str(lat(i))  ',' num2str(lon(i))   ','  num2str(alt)  ',' num2str(cm_head) ',' num2str(cm_tilt) ',' num2str(cm_roll) ')'], 'Jscript');
                pause(0.5);
            end                                                            
        end
        
        function out = parseUDP(~,data)
            dataStr = mat2str(data');
            dataCell = strsplit(dataStr(2:end-1),';');            
            out = cellfun(@(x) ['[' regexprep(x,' ',', ') ']'],dataCell,'UniformOutput',false);
        end                                             
        
    end
    
end

