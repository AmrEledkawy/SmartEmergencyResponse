#include "__cf_MultiVehicleModel.h"
#ifndef RTW_HEADER_MultiVehicleModel_acc_private_h_
#define RTW_HEADER_MultiVehicleModel_acc_private_h_
#include "rtwtypes.h"
#include "multiword_types.h"
#if !defined(ss_VALIDATE_MEMORY)
#define ss_VALIDATE_MEMORY(S, ptr)   if(!(ptr)) {\
  ssSetErrorStatus(S, RT_MEMORY_ALLOCATION_ERROR);\
  }
#endif
#if !defined(rt_FREE)
#if !defined(_WIN32)
#define rt_FREE(ptr)   if((ptr) != (NULL)) {\
  free((ptr));\
  (ptr) = (NULL);\
  }
#else
#define rt_FREE(ptr)   if((ptr) != (NULL)) {\
  free((void *)(ptr));\
  (ptr) = (NULL);\
  }
#endif
#endif
#ifndef ATMOS_TYPEDEF
typedef enum { COESA = 1 , MILHDBK310 , MILSTD210C } AtmosTypeIdx ; typedef
enum { PROFILE = 1 , ENVELOPE } ModelIdx ; typedef enum { HIGHTEMP = 1 ,
LOWTEMP , HIGHDENSITY , LOWDENSITY , HIGHPRESSURE , LOWPRESSURE } VarIdx ;
typedef enum { PP1 = 1 , PP10 } PPercentIdx ; typedef enum { K5 = 1 , K10 ,
K20 , K30 , K40 } PAltIdx ; typedef enum { EXTREME = 1 , P1 , P5 , P10 , P20
} EPercentIdx ;
#define ATMOS_TYPEDEF
#endif
#ifndef ATMOS_DEFINE
#define PRESSURE0   101325.0     
#define TEMPERATURE0   288.15    
#define GRAV_CONST       9.80665 
#define MOL_WT          28.9644  
#define R_HAT         8314.32    
#define GAMMA            1.4     
#define GMR       ( GRAV_CONST * MOL_WT / R_HAT )
#define ATMOS_DEFINE
#endif
#ifndef COESA76_DEFINE_DATA
#define NUM1976PTS 8
static real_T altitude76 [ NUM1976PTS ] = { 0.0 , 11000.0 , 20000.0 , 32000.0
, 47000.0 , 51000.0 , 71000.0 , 84852.0 } ; static real_T tempGradient76 [
NUM1976PTS ] = { ( - 0.0065 ) , 0.0 , 0.0010 , 0.0028 , 0.0 , - 0.0028 , -
0.0020 , - 0.0020 } ;
#define COESA76_DEFINE_DATA
#endif
#ifndef GRAVITY2_TYPEDEF
typedef enum { WGS84TAYLORSERIES = 1 , WGS84CLOSEAPPROX , WGS84EXACT }
GravityTypeIdx ; typedef enum { METRIC = 1 , ENGLISH } UnitIdx ; typedef enum
{ JANUARY = 1 , FEBRUARY , MARCH , APRIL , MAY , JUNE , JULY , AUGUST ,
SEPTEMBER , OCTOBER , NOVEMBER , DECEMBER } MonthIdx ;
#define GRAVITY2_TYPEDEF
#endif
#ifndef WGS84_DEFINE
#define WGS84_A      6378137.0           
#define WGS84_INV_F  298.257223563          
#define WGS84_W_DEF  7292115.0e-11       
#define WGS84_GM_DEF 3986004.418e+8      
#define WGS84_GM_PRM 3986000.9e+8       
#define WGS84_W_PRM  7292115.1467e-11   
#define WGS84_G_E    9.7803253359       
#define WGS84_K      0.00193185265241   
#define WGS84_E_2    6.69437999014e-3   
#define WGS84_EL     5.2185400842339e+5 
#define WGS84_B      6356752.3142       
#define WGS84_B_A    0.996647189335     
#define M2FT     1.0/0.3048
#define AERO_PI  3.14159265358979323846
#define DEG2RAD  AERO_PI/180.0
#define YEAR2000 2000
#define WGS84_DEFINE 
#endif
#ifndef __RTWTYPES_H__
#error This file requires rtwtypes.h to be included
#endif
#ifndef __RTW_UTFREE__
extern void * utMalloc ( size_t ) ; extern void utFree ( void * ) ;
#endif
extern real_T rt_urand_Upu32_Yd_f_pw_snf ( uint32_T * u ) ; extern real_T
rt_nrand_Upu32_Yd_f_pw_snf ( uint32_T * u ) ; extern void
rt_mrdivide_U1d1x3_U2d3x3_Yd1x3_snf ( const real_T u0 [ 3 ] , const real_T u1
[ 9 ] , real_T y [ 3 ] ) ; boolean_T
MultiVehicleModel_acc_rt_TDelayUpdateTailOrGrowBuf ( int_T * bufSzPtr , int_T
* tailPtr , int_T * headPtr , int_T * lastPtr , real_T tMinusDelay , real_T *
* tBufPtr , real_T * * uBufPtr , real_T * * xBufPtr , boolean_T isfixedbuf ,
boolean_T istransportdelay , int_T * maxNewBufSzPtr ) ; void CalcAtmosCOESA (
const real_T * altitude , real_T * temp , real_T * pressure , real_T *
density , real_T * speedofsound , real_T * temperature76 , real_T *
pressureRatio76 , int_T numPoints ) ; void wgs84_taylor_series ( real_T * h ,
real_T * phi , real_T opt_m2ft , real_T * y , int_T k ) ; real_T
MultiVehicleModel_acc_rt_TDelayInterpolate ( real_T tMinusDelay , real_T
tStart , real_T * tBuf , real_T * uBuf , int_T bufSz , int_T * lastIdx ,
int_T oldestIdx , int_T newIdx , real_T initOutput , boolean_T discrete ,
boolean_T minorStepAndTAtLastMajorOutput ) ; extern uint32_T plook_bincpa (
real_T u , const real_T bp [ ] , uint32_T maxIndex , real_T * fraction ,
uint32_T * prevIndex ) ; extern real_T intrp2d_la_pw ( const uint32_T bpIndex
[ ] , const real_T frac [ ] , const real_T table [ ] , uint32_T stride ,
const uint32_T maxIndex [ ] ) ; extern uint32_T binsearch_u32d_prevIdx (
real_T u , const real_T bp [ ] , uint32_T startIndex , uint32_T maxIndex ) ;
void lrp1efvmp1 ( const real_T hbvbggl05o [ 300 ] , olv1gstxld * localB ,
nephd1lxln * localDW , kljb3jfx1k * localP ) ; void ge2n33wzlq ( bw1rqnuzxz *
localP , ogd05noz2v * localX ) ; void bdg4dfoelg ( real_T b1315upiar ,
pp3iplrmnr * localDW , bw1rqnuzxz * localP , ogd05noz2v * localX , khi5eapfzb
* localXdot ) ; void hhpy1jenry ( pp3iplrmnr * localDW ) ; void mn1012evq4 (
pp3iplrmnr * localDW ) ; void gamgx1mju3 ( SimStruct * const S , boolean_T
atvgqiuycn , mwyxnu3o3s * localB , pp3iplrmnr * localDW , bw1rqnuzxz * localP
, ogd05noz2v * localX ) ;
#endif
