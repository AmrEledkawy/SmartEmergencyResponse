classdef GeManager < handle
    %GEMANAGER This class recieves positional data from the GeCommunicator
    %and updates the Google earth interface accordingly    
    properties
       GeFig; 
    end
    
    properties (Access = protected)   
        
        GVudp;
        QCudp;
        FWudp;
        LAudp;
        Setudp;
        
        GVdata;
        QCdata;
        FWdata;
        LAdata;
        Setdata;
        
        IEwindow;        
        GeTimer;
    end
    
    methods 
        function obj = GeManager()            
            
            % Open ActiveX-Control from Microsoft-Internet-Explorer
            GeInterface();
            explorer = actxcontrol('Shell.Explorer.2',[0 0 805 645]);                       
            
            webpage = [pwd '/web/ge_interface.html'];
            Navigate(explorer, webpage); 
            obj.IEwindow = explorer.Document.parentWindow;
            obj.initFleets(1,1,1);
            obj.startUDP();
            obj.GeTimer = timer('ExecutionMode','fixedRate','Period',0.025,'TimerFcn',@obj.updateGe);
            start(obj.GeTimer);
        end
    end
    methods (Access = protected)
        function startUDP(obj)
                         
            GVport = 4012;
            QCport = 4013;            
            FWport = 4014;
            
            LAport = 4015;
            Setport = 4016; 
            
            GeIP = '127.0.0.1';
            
            obj.GVudp = udp(GeIP,GVport);
            obj.QCudp = udp(GeIP,QCport);
            obj.FWudp = udp(GeIP,FWport);
            obj.LAudp = udp(GeIP,LAport);
            obj.Setudp = udp(GeIP,Setport);
            
             obj.GVudp.DatagramReceivedFcn = @obj.updateGV;
             obj.QCudp.DatagramReceivedFcn = @obj.updateQC;
             obj.FWudp.DatagramReceivedFcn = @obj.updateFW;
        end
        
        function delete(obj)
            fclose(obj.GVudp);
            fclose(obj.QCudp);
            fclose(obj.FWudp);
            fclose(obj.LAudp);
            disp(obj);
        end
        
        function updateGV(obj)
            data = fscanf(obj.GVudp);
            obj.GVdata = obj.parseUDP(data);
        end
        
        function updateQC(obj)
            data = fscanf(obj.QCudp);
            obj.QCdata = obj.parseUDP(data);
        end
        
        function updateFW(obj)
            data = fscanf(obj.FWudp);
            obj.FWdata = obj.parseUDP(data);
        end
        
        function updateView(obj)
            data = fscanf(obj.LAudp);
            obj.LAdata = obj.parseUDP(data);
        end
                
        function updateSet(obj)
            data = fscanf(obj.Setudp);
            obj.Setdata = obj.parseUDP(data);
        end
        
        function out = parseUDP(~,data)
            dataStr = mat2str(data');
            dataCell = strsplit(dataStr(2:end-1),';');
            out = cellfun(dataCell,@(x) ['[' regexprep(x,' ',', ') ']']);
        end               
        
        function initFleets(obj,nGV,nQC,nFW) 
            
            lat = 37.798889;
            lon = -122.443889;
            head = 0;

            la_lat = 37.798889;
            la_lon = -122.443889;
            la_alt = 0;
            la_head = 0;
            la_tilt = 70;
            la_range = 5;

            cm_lat = [37.798889;37.801250];
            cm_lon = [-122.443889;-122.455211];
            cm_alt = [0;120];
            cm_head = [0;-60];
            cm_tilt = [70;20];
            cm_roll = [0;0];
    
            cmNr = 2;
            pause(5);           

            for i = 1:cmNr
                obj.IEwindow.execScript(['addCmView(' num2str(cm_lat(i))  ',' num2str(cm_lon(i))   ','  num2str(cm_alt(i))  ',' num2str(cm_head(i)) ',' num2str(cm_tilt(i)) ',' num2str(cm_roll(i)) ')'], 'Jscript');
            end

             obj.IEwindow.execScript(['addLaView(' num2str(la_range) ',' num2str(la_tilt) ',' num2str(la_alt) ')'], 'Jscript');
            % pause(3);
            obj.IEwindow.execScript(['teleportTo(' num2str(la_lat) ',' num2str(la_lon) ',' num2str(la_head) ')'], 'Jscript');
            % pause(3);
                        
            obj.IEwindow.execScript(['addGroundVehicle(' num2str(nGV) ',' num2str(lat) ',' num2str(lon) ',' num2str(head) ')'], 'Jscript');    
            obj.IEwindow.execScript(['addArDroneVehicle(' num2str(nQC) ',' num2str(lat) ',' num2str(lon) ',' num2str(head) ')'], 'Jscript');
            obj.IEwindow.execScript(['addFixedWingVehicle(' num2str(nFW) ',' num2str(lat) ',' num2str(lon) ',' num2str(head) ')'], 'Jscript');
        end
        
        function updateGe(obj,~,~)
                           
              global LAIdx;
              GV = obj.GVdata;
              QC = obj.QCdata;
              FW = obj.FWdata;
              LA = obj.LAdata;
              %ST = obj.Setdata;
              
              obj.IEwindow.execScript(['move6GV(' GV{1} ',' GV{2} ',' GV{3} ',' GV{4} ',' GV{5} ',' GV{6} ')'], 'Jscript');
              obj.IEwindow.execScript(['move6AR(' QC{1} ',' QC{2} ',' QC{3} ',' QC{4} ',' QC{5} ',' QC{6} ')'], 'Jscript');
              obj.IEwindow.execScript(['move6FW(' FW{1} ',' FW{2} ',' FW{3} ',' FW{4} ',' FW{5} ',' FW{6} ')'], 'Jscript');
              
              if LAIdx < 3
                obj.IEwindow.execScript(['moveFullLaView(' num2str(LAIdx) ',' LA{1} ',' LA{2} ',' LA{3} ',' LA{4} ',' LA{5} ',' LA{6} ',' LA{7} ')'], 'Jscript');
              else
                obj.IEwindow.execScript(['moveFullCmView(' num2str(Views - LAIdx) ',' LA{1} ',' LA{2} ',' LA{3} ',' LA{5} ',' LA{6} ',' LA{7} ')'], 'Jscript');
              end
              
              % Set LAIdx to -1 to not update
              obj.IEwindow.execScript(['synchronousUpdate(' num2str(LAIdx) ', 0, 0, 0, 0, 0)'], 'Jscript');
             
        end
    end
    
end

