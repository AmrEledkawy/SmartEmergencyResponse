function planner = quadrotorRoutePlannerTestScript
% 11, 13, 15, 18, 19
rng(19);
scale = 100;

theaterx = [-.05,.05]*scale;
theatery = [-.05,.05]*scale;

planner = QuadrotorRoutePlanner;

% Make up requests
reqs(1) = Request([-.03,.03]*scale,ItemFactory.makeItem('Defibrillator'),'Me',1,now,now,1,true,false);
reqs(2) = Request([.03,.03]*scale,ItemFactory.makeItem('Defibrillator'),'Me',1,now,now,1,true,false);
reqs(3) = randomRequest;
reqs(4) = randomRequest;
reqs(5) = randomRequest;

% Make up vehicles
trucks(1) = GroundVehicle(10,[-.03,0]*scale,0);
trucks(2) = GroundVehicle(11,[.03,0]*scale,0);

% Make up quadcopters
copters(1) = QuadCopter(10,[-.035,.01]*scale);
copters(2) = QuadCopter(11,[.04,-.010]*scale);

% Draw the starting config
ax = axes('xlim',theaterx,'ylim',theatery);
for truck = trucks
    DeploymentTruckSprite(ax,truck);
end
for req = reqs
    RequestMarker(ax,req);
end
for copter = copters
    QuadCopterSprite(ax,copter);
end

% Plan the routes
planner = planner.planRoutes(reqs,copters,trucks);

for ii = 1:numel(planner.optimalRoutes)
    route = planner.optimalRoutes{ii};
    line('parent',ax,'xdata',route(:,1),'ydata',route(:,2),'color',rand(1,3));
end

    function retval = randomRequest
        catalog = ItemFactory.getCatalog;
        isDelivery = (rand < .5);
        retval = Request(rand(1,2).*[diff(theaterx),diff(theatery)]+[theaterx(1) theatery(1)],...
                         ItemFactory.makeItem(catalog(randi(numel(catalog)))),...
                         'Me',...
                         1,...
                         now,...
                         now,...
                         randi(3),...
                         isDelivery,...
                         ~isDelivery);
        retval.item
        retval.quantity
    end
end